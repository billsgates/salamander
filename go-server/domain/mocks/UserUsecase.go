// Code generated by mockery 2.7.4. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "go-server/domain"

	mock "github.com/stretchr/testify/mock"
)

// UserUsecase is an autogenerated mock type for the UserUsecase type
type UserUsecase struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, user
func (_m *UserUsecase) Create(ctx context.Context, user *domain.User) error {
	ret := _m.Called(ctx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FetchAll provides a mock function with given fields: ctx
func (_m *UserUsecase) FetchAll(ctx context.Context) ([]domain.User, error) {
	ret := _m.Called(ctx)

	var r0 []domain.User
	if rf, ok := ret.Get(0).(func(context.Context) []domain.User); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByEmailPassword provides a mock function with given fields: ctx, email, password
func (_m *UserUsecase) GetByEmailPassword(ctx context.Context, email string, password string) (*domain.User, error) {
	ret := _m.Called(ctx, email, password)

	var r0 *domain.User
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *domain.User); ok {
		r0 = rf(ctx, email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *UserUsecase) GetByID(ctx context.Context, id string) (*domain.UserInfo, error) {
	ret := _m.Called(ctx, id)

	var r0 *domain.UserInfo
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.UserInfo); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.UserInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserRating provides a mock function with given fields: ctx, id
func (_m *UserUsecase) GetUserRating(ctx context.Context, id string) (*domain.RatingResponse, error) {
	ret := _m.Called(ctx, id)

	var r0 *domain.RatingResponse
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.RatingResponse); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.RatingResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, user
func (_m *UserUsecase) Update(ctx context.Context, user *domain.UserRequest) error {
	ret := _m.Called(ctx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.UserRequest) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateRating provides a mock function with given fields: ctx, id, rating
func (_m *UserUsecase) UpdateRating(ctx context.Context, id string, rating int32) error {
	ret := _m.Called(ctx, id, rating)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int32) error); ok {
		r0 = rf(ctx, id, rating)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
