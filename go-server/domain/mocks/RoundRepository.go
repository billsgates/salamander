// Code generated by mockery 2.7.4. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "go-server/domain"

	mock "github.com/stretchr/testify/mock"
)

// RoundRepository is an autogenerated mock type for the RoundRepository type
type RoundRepository struct {
	mock.Mock
}

// AddRound provides a mock function with given fields: ctx, round
func (_m *RoundRepository) AddRound(ctx context.Context, round *domain.Round) (int32, error) {
	ret := _m.Called(ctx, round)

	var r0 int32
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Round) int32); ok {
		r0 = rf(ctx, round)
	} else {
		r0 = ret.Get(0).(int32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.Round) error); ok {
		r1 = rf(ctx, round)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRound provides a mock function with given fields: ctx, roundId
func (_m *RoundRepository) DeleteRound(ctx context.Context, roundId int32) error {
	ret := _m.Called(ctx, roundId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) error); ok {
		r0 = rf(ctx, roundId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetRound provides a mock function with given fields: ctx, roomId
func (_m *RoundRepository) GetRound(ctx context.Context, roomId int32) (*domain.RoundInfo, error) {
	ret := _m.Called(ctx, roomId)

	var r0 *domain.RoundInfo
	if rf, ok := ret.Get(0).(func(context.Context, int32) *domain.RoundInfo); ok {
		r0 = rf(ctx, roomId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.RoundInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, roomId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
