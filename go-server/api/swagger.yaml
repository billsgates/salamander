openapi: 3.0.0
info:
  title: Salamander api server
  description: Salamander is the backend api server for HermitCrab.
  version: 1.0.1
servers:
- url: http://localhost:5000/api/v1
tags:
- name: auth
  description: Authentication
- name: users
  description: Users
- name: rooms
  description: Rooms
- name: services
  description: Services
paths:
  /auth/signup:
    post:
      tags:
      - auth
      summary: sign up
      operationId: signUp
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequest'
        required: true
      responses:
        "201":
          description: successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
  /auth/signin:
    post:
      tags:
      - auth
      summary: sign in
      operationId: signIn
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        "200":
          description: successfully logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
  /users:
    get:
      tags:
      - users
      summary: get users
      operationId: getUsers
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
                x-content-type: application/json
      security:
      - BearerAuth: []
    patch:
      tags:
      - users
      summary: update user info
      operationId: updateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/body'
        required: true
      responses:
        "201":
          description: successfully update user
      security:
      - BearerAuth: []
  /users/{id}:
    get:
      tags:
      - users
      summary: get user by id
      operationId: getUser
      parameters:
      - name: id
        in: path
        description: User ID
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      security:
      - BearerAuth: []
  /rooms:
    get:
      tags:
      - rooms
      summary: get current joined rooms and status
      operationId: getMenuInfo
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoomsResponse'
      security:
      - BearerAuth: []
    post:
      tags:
      - rooms
      summary: create a room
      operationId: createRoom
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoomRequest'
        required: true
      responses:
        "201":
          description: successfully created a room
      security:
      - BearerAuth: []
  /rooms/{id}:
    get:
      tags:
      - rooms
      summary: get room info by room id
      operationId: getRoom
      parameters:
      - name: id
        in: path
        description: Room ID
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoomInfoResponse'
      security:
      - BearerAuth: []
    delete:
      tags:
      - rooms
      summary: delete room
      operationId: deleteRoom
      parameters:
      - name: id
        in: path
        description: Room ID
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: OK
      security:
      - BearerAuth: []
    patch:
      tags:
      - rooms
      summary: update room info by room id
      operationId: updateRoom
      parameters:
      - name: id
        in: path
        description: Room ID
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoomRequest'
        required: true
      responses:
        "201":
          description: successfully update room
      security:
      - BearerAuth: []
  /rooms/{id}/start:
    patch:
      tags:
      - rooms
      summary: set start date of room
      operationId: updateRoomStartDate
      parameters:
      - name: id
        in: path
        description: Room ID
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/body_1'
        required: true
      responses:
        "201":
          description: successfully set room start Date
      security:
      - BearerAuth: []
  /rooms/{id}/invitation:
    post:
      tags:
      - rooms
      summary: generate invitation code
      operationId: postInvitationCode
      parameters:
      - name: id
        in: path
        description: Room ID
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
      security:
      - BearerAuth: []
  /rooms/join:
    post:
      tags:
      - rooms
      summary: join room by invitation code
      operationId: joinRoom
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoomJoinRequest'
        required: true
      responses:
        "200":
          description: OK
      security:
      - BearerAuth: []
  /services:
    get:
      tags:
      - services
      summary: get services
      operationId: getServices
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Service'
                x-content-type: application/json
  /services/{id}:
    get:
      tags:
      - services
      summary: get service plans by id
      operationId: getServicesPlan
      parameters:
      - name: id
        in: path
        description: Service ID
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
  /participant:
    delete:
      tags:
      - participant
      summary: delete participant from rooms
      operationId: deleteParticipant
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/body_2'
        required: true
      responses:
        "204":
          description: successfully delete participant from rooms
      security:
      - BearerAuth: []
  /participant/status:
    patch:
      tags:
      - participant
      summary: change parcipant payment status
      operationId: updateParticipantStatus
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/body_3'
        required: true
      responses:
        "201":
          description: successfully update participant payment status
      security:
      - BearerAuth: []
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: kevin yu
        email:
          type: string
          format: email
          example: kevin@ntu.im
        password_digest:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1NzEwMzgyMjQuNzQ0MzI0MiwidXNlciI6eyJJRCI6IjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCIsIlVzZXJuYW1lIjoiemhhc2hrZXZ5Y2giLCJQYXNzd29yZCI6IjQyODYwMTc5ZmFiMTQ2YzZiZDAyNjlkMDViZTM0ZWNmYmY5Zjk3YjUifX0.3dsyKJQ-HZJxdvBMui0Mzgw6yb6If9aB8imGhxMOjsk
        rating:
          type: integer
          example: 5
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      example:
        updated_at: 2000-01-23T04:56:07.000+00:00
        name: kevin yu
        rating: 5
        created_at: 2000-01-23T04:56:07.000+00:00
        id: 1
        password_digest: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1NzEwMzgyMjQuNzQ0MzI0MiwidXNlciI6eyJJRCI6IjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCIsIlVzZXJuYW1lIjoiemhhc2hrZXZ5Y2giLCJQYXNzd29yZCI6IjQyODYwMTc5ZmFiMTQ2YzZiZDAyNjlkMDViZTM0ZWNmYmY5Zjk3YjUifX0.3dsyKJQ-HZJxdvBMui0Mzgw6yb6If9aB8imGhxMOjsk
        email: kevin@ntu.im
    SignupRequest:
      required:
      - email
      - name
      - password
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
      example:
        name: test
        email: test@ntu.im
        password: test
    LoginRequest:
      required:
      - email
      - password
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
      example:
        email: kevin@ntu.im
        password: kevin
    LoginResponse:
      type: object
      properties:
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1NzEwMzgyMjQuNzQ0MzI0MiwidXNlciI6eyJJRCI6IjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCIsIlVzZXJuYW1lIjoiemhhc2hrZXZ5Y2giLCJQYXNzd29yZCI6IjQyODYwMTc5ZmFiMTQ2YzZiZDAyNjlkMDViZTM0ZWNmYmY5Zjk3YjUifX0.3dsyKJQ-HZJxdvBMui0Mzgw6yb6If9aB8imGhxMOjsk
      example:
        token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1NzEwMzgyMjQuNzQ0MzI0MiwidXNlciI6eyJJRCI6IjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCIsIlVzZXJuYW1lIjoiemhhc2hrZXZ5Y2giLCJQYXNzd29yZCI6IjQyODYwMTc5ZmFiMTQ2YzZiZDAyNjlkMDViZTM0ZWNmYmY5Zjk3YjUifX0.3dsyKJQ-HZJxdvBMui0Mzgw6yb6If9aB8imGhxMOjsk
    Room:
      type: object
      properties:
        id:
          type: integer
          example: 1
        announcement:
          type: string
        is_public:
          type: boolean
        room_status:
          $ref: '#/components/schemas/RoomStatus'
        starting_time:
          type: string
          format: date-time
        ending_time:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        max_count:
          type: integer
          example: 5
        admin_id:
          type: integer
          example: 1
        service_id:
          type: integer
          example: 1
        plan_name:
          type: string
          example: Premium
    RoomRequest:
      required:
      - is_public
      - max_count
      - plan_name
      - service_id
      type: object
      properties:
        max_count:
          type: integer
        admin_id:
          type: integer
        service_id:
          type: integer
        plan_name:
          type: string
        payment_period:
          type: integer
          format: month
        is_public:
          type: boolean
        announcement:
          type: string
      example:
        max_count: 5
        service_id: 1
        plan_name: Premium
        is_public: true
    RoomJoinRequest:
      required:
      - invitation_code
      type: object
      properties:
        invitation_code:
          type: string
    Service:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Netflix
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      example:
        updated_at: 2000-01-23T04:56:07.000+00:00
        name: Netflix
        created_at: 2000-01-23T04:56:07.000+00:00
        id: 1
    Participation:
      required:
      - is_host
      - room_id
      - user_id
      type: object
      properties:
        user_id:
          type: integer
        room_id:
          type: integer
        is_host:
          type: boolean
      example:
        max_count: 1
        service_id: 1
        plan_name: true
    Admin:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        rating:
          type: integer
        phone:
          type: string
      example:
        name: Kevin Yu
        email: kevin@ntu.im
        rating: 4
        phone: 9.12345678E8
    Member:
      type: object
      properties:
        user_id:
          type: integer
        user_name:
          type: string
        payment_status:
          $ref: '#/components/schemas/PaymentStatus'
      example:
        user_id: 1
        user_name: Frank Chen
        payment_status: unpaid
    RoomItem:
      type: object
      properties:
        room_id:
          type: integer
          example: 1
        service_name:
          type: string
          example: Netflix
        plan_name:
          type: string
          example: Premium
        is_host:
          type: boolean
          example: true
        cost:
          type: integer
          example: 720
        payment_status:
          $ref: '#/components/schemas/PaymentStatus'
        room_status:
          $ref: '#/components/schemas/RoomStatus'
      example:
        room_id: 1
        cost: 720
        service_name: Netflix
        payment_status: unpaid
        is_host: true
        plan_name: Premium
        room_status: created
    RoomsResponse:
      type: array
      items:
        $ref: '#/components/schemas/RoomItem'
      x-schema-name: RoomsResponse
    RoomInfoResponse:
      type: object
      properties:
        room_id:
          type: integer
          example: 1
        is_public:
          type: boolean
          example: false
        announcement:
          type: string
          example: Hi! This is the announcement from administrator
        max_count:
          type: integer
          example: 4
        payment_period:
          type: integer
          format: month
          example: 6
        room_status:
          $ref: '#/components/schemas/RoomStatus'
        starting_time:
          type: string
          format: date-time
        ending_time:
          type: string
          format: date-time
        service_name:
          type: string
          example: Netflix
        plan_name:
          type: string
          example: Premium
        role:
          type: string
          example: member
        payment_fee:
          type: integer
          example: 720
        admin:
          $ref: '#/components/schemas/Admin'
        members:
          type: array
          items:
            $ref: '#/components/schemas/Member'
      example:
        room_id: 1
        role: member
        ending_time: 2000-01-23T04:56:07.000+00:00
        service_name: Netflix
        admin:
          name: Kevin Yu
          email: kevin@ntu.im
          rating: 4
          phone: 9.12345678E8
        plan_name: Premium
        room_status: created
        max_count: 4
        members:
        - user_id: 1
          user_name: Frank Chen
          payment_status: unpaid
        - user_id: 1
          user_name: Frank Chen
          payment_status: unpaid
        is_public: false
        payment_period: 6
        payment_fee: 720
        starting_time: 2000-01-23T04:56:07.000+00:00
        announcement: Hi! This is the announcement from administrator
    PaymentStatus:
      type: string
      enum:
      - unpaid
      - pending
      - confirmed
    RoomStatus:
      type: string
      enum:
      - created
      - start
      - end
    body:
      type: object
      properties:
        name:
          type: string
          example: Carolyn
        email:
          type: string
          example: Carolyn@example.com
        image_url:
          type: string
          format: url
    body_1:
      type: object
      properties:
        start_date:
          type: string
          format: date-time
        plan_interval:
          type: integer
          format: month
          example: 12
        payment_deadline:
          type: integer
          example: 1
        is_add_canlendar:
          type: boolean
          example: true
    inline_response_200:
      type: object
      properties:
        code:
          type: string
      example:
        code: code
    body_2:
      type: object
      properties:
        user_id:
          type: integer
          example: 1
        room_id:
          type: integer
          example: 2
    body_3:
      type: object
      properties:
        userId:
          type: integer
          example: 1
        roomId:
          type: integer
          example: 2
        status:
          $ref: '#/components/schemas/PaymentStatus'
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
